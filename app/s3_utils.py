import boto3
import os
import yaml
from typing import Optional, List, Dict, Any
from botocore.exceptions import ClientError, NoCredentialsError
import streamlit as st
import tempfile
import base64

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv not installed


class S3Manager:
    def __init__(self):
        """Initialize S3 client with credentials from environment or config"""
        self.s3_client = None
        # Try both environment variable names
        self.bucket_name = os.getenv('S3_BUCKET_NAME') or os.getenv('S3_BUCKET') or 'finallcpreports'
        self.region = os.getenv('AWS_REGION', 'us-east-1')
        
        # Try to load config file
        config = self._load_config()
        if config:
            self.bucket_name = config.get('s3', {}).get('bucket_name', self.bucket_name)
            self.region = config.get('aws', {}).get('region', self.region)
            aws_access_key = config.get('aws', {}).get('access_key_id')
            aws_secret_key = config.get('aws', {}).get('secret_access_key')
        else:
            aws_access_key = os.getenv('AWS_ACCESS_KEY_ID')
            aws_secret_key = os.getenv('AWS_SECRET_ACCESS_KEY')
        
        # Try to initialize S3 client
        try:
            self.s3_client = boto3.client(
                's3',
                aws_access_key_id=aws_access_key,
                aws_secret_access_key=aws_secret_key,
                region_name=self.region
            )
            # Test connection
            self.s3_client.head_bucket(Bucket=self.bucket_name)
        except (NoCredentialsError, ClientError) as e:
            st.warning(f"S3 connection failed: {str(e)}")
            self.s3_client = None
    
    def _load_config(self) -> Optional[Dict[str, Any]]:
        """Load S3 configuration from file"""
        config_paths = ['s3_config.yaml', 'config/s3_config.yaml']
        for path in config_paths:
            try:
                if os.path.exists(path):
                    with open(path, 'r') as f:
                        return yaml.safe_load(f)
            except Exception:
                continue
        return None
    
    def get_case_files(self, case_id: str) -> Dict[str, Any]:
        """
        Get all files for a specific case ID
        Returns dict with ground_truth, input_files, and output_reports
        """
        if not self.s3_client:
            return {}
        
        try:
            # List objects with case_id prefix
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=f"{case_id}/"
            )
            
            files = response.get('Contents', [])
            case_files = {
                'ground_truth': None,
                'input_files': [],
                'output_reports': [],
                'complete_report': None,
                'metadata': {}
            }
            
            for file_obj in files:
                key = file_obj['Key']
                
                # Ground truth (original documents)
                if 'groundtruth' in key.lower() and (key.endswith('.pdf') or key.endswith('.docx')):
                    case_files['ground_truth'] = key
                
                # Input files (fed to LLM)
                elif 'input' in key.lower() and key.endswith('.pdf'):
                    case_files['input_files'].append(key)
                
                # Output reports (generated by n8n)
                elif 'output' in key.lower() and key.endswith('.pdf'):
                    if 'complete' in key.lower() or 'completeai' in key.lower():
                        case_files['complete_report'] = key
                    elif 'section' in key.lower():
                        case_files['output_reports'].append(key)
                    else:
                        case_files['output_reports'].append(key)
                
                # Metadata files
                elif key.endswith('.json'):
                    case_files['metadata'][key.split('/')[-1]] = key
            
            return case_files
            
        except ClientError as e:
            st.error(f"Error fetching case files: {str(e)}")
            return {}
    
    def download_pdf(self, s3_key: str) -> Optional[bytes]:
        """Download PDF from S3 and return as bytes"""
        if not self.s3_client:
            return None
        
        try:
            response = self.s3_client.get_object(Bucket=self.bucket_name, Key=s3_key)
            return response['Body'].read()
        except ClientError as e:
            st.error(f"Error downloading PDF {s3_key}: {str(e)}")
            return None
    
    def get_pdf_base64(self, s3_key: str) -> Optional[str]:
        """Get PDF from S3 as base64 encoded string for iframe display"""
        pdf_bytes = self.download_pdf(s3_key)
        if pdf_bytes:
            return base64.b64encode(pdf_bytes).decode('utf-8')
        return None
    
    def list_available_cases(self) -> List[str]:
        """List all available case IDs in S3"""
        if not self.s3_client:
            return []
        
        try:
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Delimiter='/'
            )
            
            cases = []
            for prefix in response.get('CommonPrefixes', []):
                case_prefix = prefix['Prefix']
                if case_prefix.startswith('case_'):
                    case_id = case_prefix.replace('case_', '').replace('/', '')
                    if case_id.isdigit():
                        cases.append(case_id)
            
            return sorted(cases, reverse=True)
            
        except ClientError as e:
            st.error(f"Error listing cases: {str(e)}")
            return []
    
    def get_comparison_reports(self, case_id: str) -> List[Dict[str, Any]]:
        """Get list of comparison reports for a case with metadata"""
        if not self.s3_client:
            return []
        
        try:
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=f"case_{case_id}/comparison/"
            )
            
            reports = []
            for file_obj in response.get('Contents', []):
                key = file_obj['Key']
                if key.endswith('.pdf'):
                    # Extract metadata from filename or tags
                    filename = key.split('/')[-1]
                    reports.append({
                        'key': key,
                        'filename': filename,
                        'size': file_obj['Size'],
                        'last_modified': file_obj['LastModified']
                    })
            
            return sorted(reports, key=lambda x: x['last_modified'], reverse=True)
            
        except ClientError as e:
            st.error(f"Error fetching comparison reports: {str(e)}")
            return []


# Global S3 manager instance
s3_manager = S3Manager()


def get_s3_manager() -> S3Manager:
    """Get the global S3 manager instance"""
    return s3_manager


def mock_s3_data_for_demo(case_id: str) -> Dict[str, Any]:
    """
    Mock S3 data for demo purposes when S3 is not available
    This simulates what the real S3 integration would return
    """
    return {
        'ground_truth': f"{case_id}/GroundTruth/original_document.docx",
        'input_files': [
            f"{case_id}/Input/pages/page_0001.pdf",
            f"{case_id}/Input/pages/page_0002.pdf",
            f"{case_id}/Input/pages/page_0003.pdf"
        ],
        'output_reports': [
            f"{case_id}/Output/4245-TyronneCraig_Section_1_all_pages_2_5_PRO.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_2_all_pages_2_5_PRO.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_3.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_4_all_pages_updated.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_5_all_pages_2_5_PRO.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_6_all_pages_2_5_PRO.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_7_all_pages_2_5_PRO.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_8_all_pages_2_5_PRO.pdf",
            f"{case_id}/Output/4245-TyronneCraig_Section_9_all_pages_updated.pdf"
        ],
        'complete_report': f"{case_id}/Output/4245-TyronneCraig-CompleteAIGenerated.pdf",
        'metadata': {}
    }
